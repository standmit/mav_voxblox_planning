<?xml version="1.0"?>
<launch>
  <arg name="voxel_size" default="0.4" />
  <arg name="voxels_per_side" default="16" />
  <arg name="frame_id" default="world" />
  <arg name="esdf_max_distance_m" default="2.0"/>
  <arg name="clear_radius" default="1.0" />
  <arg name="pointcloud_topic" default="pointcloud" />

  <node name="voxblox_skeleton_planner" pkg="voxblox_skeleton_planner" type="skeleton_global_planner_full_node" args="-minloglevel=2" output="screen" clear_params="true" respawn="true">
    <remap from="pointcloud" to="$(arg pointcloud_topic)"/>
     
    <param name="verbose" value="false" />
    <param name="visualize" value="true" />
    <param name="skeletonizer_visualize" value="true" />
    <param name="world_frame" value="$(arg frame_id)" />
    <param name="frame_id" value="$(arg frame_id)" />

    <!-- Planner params -->
    <param name="robot_radius" value="1.0" />
    <param name="trust_approx_solution" value="true" />
    <param name="split_at_collisions" value="true" />
    <param name="optimize_time" value="true" />

	<!-- Skeletonizer params -->
    <param name="generate_by_layer_neighbors" value="false" />
    <!-- If using full euclidean: 0.78 (45 degrees) -->
    <!-- If using quasi-Euclidean: 1.57 (90 degrees) -->
    <param name="min_separation_angle" value="0.78" />
    <param name="update_esdf" value="false" />
    <param name="min_gvd_distance" value="0.5" />
    <param name="esdf_add_occupied_crust" value="true" />

    <!-- ESDF params -->
    <param name="method" value="fast" />
    <param name="color_mode" value="normals" />
    <param name="use_tf_transforms" value="true" />
    <param name="use_const_weight" value="true" />
    <param name="voxel_carving_enabled" value="true" />
    <param name="clear_sphere_for_planning" value="true" />
    
    <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
    <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
    <param name="esdf_max_distance_m" value="$(arg esdf_max_distance_m)" />
    <param name="esdf_min_diff_m" value="0.0" />
    <param name="max_ray_length_m" value="10.0" />        
    
    <param name="min_time_between_msgs_sec" value="1.0" />        
    <param name="occupied_sphere_radius" value="4.0" />
    <param name="clear_sphere_radius" value="$(arg clear_radius)" />
    <param name="slice_level" value="1.0" />

    <!-- Publishing settings. -->
    <param name="esdf_update_trigger" value="true" /> <!-- esdf update -> publish -->
      
	<param name="save_pbstream_by_timer_" value="false" /> <!-- save to tmpfs -->
	<param name="file_path" value="/home/$(env USER)/tmpfs_voxblox" />
	<param name="autostart_" value="false" /> <!-- timer for saving -->
	<param name="send_map_rate_" value="1.0" /> <!-- timer rate -->

    <param name="update_mesh_every_n_sec" value="1.0" /> <!-- for rviz -->
    <param name="update_esdf_every_n_sec" value="1.0" /> <!-- Esdf Timer -->
    <param name="publish_map_every_n_sec" value="1.0" />
    
    <param name="publish_tsdf_map" value="false" />
    <param name="publish_esdf_map" value="false" />
    <param name="publish_slices" value="true" />
    <param name="publish_tsdf_info" value="true" />
    <param name="publish_pointclouds" value="true" />
    <param name="output_mesh_as_pointcloud" value="true" /> <!-- output mesh as pointcloud -->
    <param name="output_mesh_as_pcl_mesh" value="true" /> <!-- output mesh generated by service -->
    <param name="mesh_filename" value="$(find voxblox_ros)/mesh_results/my_mesh.ply" /> <!-- mesh path for save by service -->
    <param name="publish_traversable" value="true" />
    <param name="traversability_radius" value="1.0" />
   
  </node>

</launch>
